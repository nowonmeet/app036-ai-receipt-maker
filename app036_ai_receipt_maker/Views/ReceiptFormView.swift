//
//  ReceiptFormView.swift
//  app036_ai_receipt_maker
//
//  Created by RYO MISHIMA on 2025/08/10.
//

import SwiftUI

struct ReceiptFormView: View {
    @ObservedObject var viewModel: ReceiptFormViewModel
    @EnvironmentObject private var mainViewModel: MainViewModel
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("Custom Receipt")
                .font(.headline)
            
            Text("Only store name is required. Other fields are optional and will be generated by AI if not provided.")
                .font(.caption)
                .foregroundColor(.secondary)
                .padding(.bottom, 8)
            
            // Store Information Section
            VStack(alignment: .leading, spacing: 12) {
                Text("Store Information")
                    .font(.subheadline)
                    .fontWeight(.semibold)
                
                TextField("Store Name *", text: $viewModel.storeName)
                    .textFieldStyle(.roundedBorder)
                
                TextField("Address (Optional)", text: $viewModel.address)
                    .textFieldStyle(.roundedBorder)
                
                TextField("Phone Number (Optional)", text: $viewModel.phoneNumber)
                    .textFieldStyle(.roundedBorder)
                    .keyboardType(.phonePad)
            }
            
            // Items Section
            Text("Items (Optional)")
                .font(.subheadline)
                .fontWeight(.semibold)
            
            if viewModel.items.isEmpty {
                Text("No items added. AI will generate appropriate items for the store.")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .italic()
            } else {
                ForEach(viewModel.items.indices, id: \.self) { index in
                    VStack(spacing: 8) {
                        HStack {
                            TextField("Item name", text: $viewModel.items[index].name)
                                .textFieldStyle(.roundedBorder)
                            
                            Button("Remove") {
                                viewModel.removeItem(at: index)
                            }
                            .foregroundColor(.red)
                            .font(.caption)
                        }
                        
                        HStack {
                            TextField("Price", value: $viewModel.items[index].price, format: .number)
                                .textFieldStyle(.roundedBorder)
                                .frame(width: 100)
                            
                            Text("Ã—")
                                .foregroundColor(.secondary)
                            
                            Stepper("Qty: \(viewModel.items[index].quantity)", 
                                   value: $viewModel.items[index].quantity, 
                                   in: 1...99)
                                .frame(width: 120)
                            
                            Spacer()
                            
                            Text(viewModel.formatPrice(Decimal(viewModel.items[index].price) * Decimal(viewModel.items[index].quantity)))
                                .fontWeight(.semibold)
                        }
                    }
                    .padding(.vertical, 4)
                }
                
                Divider()
                
                HStack {
                    Text("Total:")
                        .fontWeight(.semibold)
                    Spacer()
                    Text(viewModel.formatPrice(viewModel.calculateTotal()))
                        .fontWeight(.bold)
                        .font(.headline)
                }
            }
            
            Button("Add Item") {
                viewModel.addItem()
            }
            .buttonStyle(.bordered)
            .frame(maxWidth: .infinity)
            
            Button("Generate Receipt") {
                let receiptData = viewModel.createReceiptData()
                
                Task {
                    await mainViewModel.generateReceipt(receiptData: receiptData)
                }
            }
            .buttonStyle(.borderedProminent)
            .controlSize(.large)
            .disabled(!viewModel.isValid)
        }
        .padding()
        .background(Color.gray.opacity(0.1))
        .cornerRadius(12)
    }
}

//#Preview {
//    ReceiptFormView(viewModel: ReceiptFormViewModel())
//}