//
//  ReceiptFormView.swift
//  app036_ai_receipt_maker
//
//  Created by RYO MISHIMA on 2025/08/10.
//

import SwiftUI

struct ReceiptFormView: View {
    @ObservedObject var viewModel: ReceiptFormViewModel
    let onGenerate: (ReceiptData) -> Void
    
    var body: some View {
        ScrollView(.vertical, showsIndicators: false) {
            VStack(alignment: .leading, spacing: 20) {
            Text("Custom Receipt")
                .font(.headline)
            
            Text("Only store name is required. Other fields are optional and will be generated by AI if not provided.")
                .font(.caption)
                .foregroundColor(.secondary)
                .padding(.bottom, 8)
            
            // Store Information Section
            VStack(alignment: .leading, spacing: 12) {
                HStack {
                    Image(systemName: "storefront")
                        .foregroundColor(.blue)
                    Text("Store Information")
                        .font(.subheadline)
                        .fontWeight(.semibold)
                }
                .padding(.bottom, 4)
                
                TextField("Store Name *", text: $viewModel.storeName)
                    .textFieldStyle(.roundedBorder)
                
                TextField("Address (Optional)", text: $viewModel.address)
                    .textFieldStyle(.roundedBorder)
                
                TextField("Phone Number (Optional)", text: $viewModel.phoneNumber)
                    .textFieldStyle(.roundedBorder)
                    .keyboardType(.phonePad)
                
                // Date & Time Section
                VStack(alignment: .leading, spacing: 8) {
                    Toggle("Use Custom Date & Time", isOn: $viewModel.useCustomDate)
                        .font(.subheadline)
                    
                    if viewModel.useCustomDate {
                        DatePicker("Receipt Date & Time", selection: $viewModel.receiptDate, displayedComponents: [.date, .hourAndMinute])
                            .datePickerStyle(.compact)
                            .font(.subheadline)
                    }
                }
            }
            
            // Items Section
            HStack {
                Image(systemName: "list.bullet.clipboard")
                    .foregroundColor(.green)
                Text("Items (Optional)")
                    .font(.subheadline)
                    .fontWeight(.semibold)
            }
            .padding(.bottom, 4)
            
            if viewModel.items.isEmpty {
                Text("No items added. AI will generate appropriate items for the store.")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .italic()
            } else {
                ForEach(viewModel.items.indices, id: \.self) { index in
                    VStack(spacing: 8) {
                        HStack {
                            TextField("Item name", text: $viewModel.items[index].name)
                                .textFieldStyle(.roundedBorder)
                            
                            Button("Remove") {
                                viewModel.removeItem(at: index)
                            }
                            .foregroundColor(.red)
                            .font(.caption)
                        }
                        
                        HStack(spacing: 8) {
                            VStack(alignment: .leading, spacing: 4) {
                                Text("Price")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                TextField("0.00", value: $viewModel.items[index].price, format: .number)
                                    .textFieldStyle(.roundedBorder)
                                    .keyboardType(.decimalPad)
                                    .frame(width: 80)
                            }
                            
                            Text("×")
                                .foregroundColor(.secondary)
                                .padding(.top, 20)
                            
                            VStack(alignment: .center, spacing: 4) {
                                Text("Qty")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                HStack {
                                    Button(action: {
                                        viewModel.decrementItemQuantity(at: index)
                                    }) {
                                        Text("-")
                                            .foregroundColor(.primary)
                                            .fontWeight(.medium)
                                    }
                                    .frame(width: 30, height: 30)
                                    .background(Color.gray.opacity(0.2))
                                    .cornerRadius(6)
                                    
                                    Text("\(viewModel.items[index].quantity)")
                                        .frame(minWidth: 30)
                                        .fontWeight(.medium)
                                    
                                    Button(action: {
                                        viewModel.incrementItemQuantity(at: index)
                                    }) {
                                        Text("+")
                                            .foregroundColor(.primary)
                                            .fontWeight(.medium)
                                    }
                                    .frame(width: 30, height: 30)
                                    .background(Color.gray.opacity(0.2))
                                    .cornerRadius(6)
                                }
                            }
                            
                            Spacer()
                            
                            VStack(alignment: .trailing, spacing: 4) {
                                Text("Total")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                Text(viewModel.formatPrice(Decimal(viewModel.items[index].price) * Decimal(viewModel.items[index].quantity)))
                                    .fontWeight(.semibold)
                                    .foregroundColor(.primary)
                            }
                        }
                    }
                    .padding(.vertical, 4)
                }
                
                Divider()
                
                HStack {
                    Text("Total:")
                        .fontWeight(.semibold)
                    Spacer()
                    Text(viewModel.formatPrice(viewModel.calculateTotal()))
                        .fontWeight(.bold)
                        .font(.headline)
                }
            }
            
            Button("Add Item") {
                viewModel.addItem()
            }
            .buttonStyle(.bordered)
            .frame(maxWidth: .infinity)
            
            Button("Generate Receipt") {
                let receiptData = viewModel.createReceiptData()
                onGenerate(receiptData)
            }
            .buttonStyle(.borderedProminent)
            .controlSize(.large)
            .disabled(!viewModel.isValid)
            }
            .padding()
            .padding(.bottom, 20) // 下部に余白を追加してスクロール時の余裕を確保
        }
        .background(Color.gray.opacity(0.1))
        .cornerRadius(12)
        .onTapGesture {
            hideKeyboard()
        }
    }
    
    private func hideKeyboard() {
        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
    }
}

//#Preview {
//    ReceiptFormView(viewModel: ReceiptFormViewModel())
//}